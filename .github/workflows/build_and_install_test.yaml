name: Test build and install upon Python 3.9 to 3.11

on:
  push:
    branches:
    - '**'
  pull_request:
    branches:
    - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Check Python version
      run: python --version

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}
          ${{ runner.os }}-pip

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry tox

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=src" >> $GITHUB_ENV

    # Clean the dist/ directory to avoid multiple .whl files
    - name: Clean dist directory
      run: rm -rf dist/*

    - name: Build package
      run: |
        poetry build

    - name: Install package
      run: |
        pip install dist/*.whl

    - name: Verify package installation
      run: |
        python -c 'import construct_tracker; print("Package imported successfully")'

    - name: Check tox environments
      run: tox --listenvs

    # Run tox to test in multiple environments
    - name: Run tox
      run: tox


#  publish:
#    needs: test
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v2
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.11
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install poetry
#
#    - name: Build and publish to PyPI
#      env:
#        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#      run: |
#        poetry build
#        pip install twine
#        twine upload dist/*
